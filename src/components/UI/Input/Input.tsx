"use client"
import React, {useEffect, useRef, useState} from 'react';
import './Input.css';

interface InputProps {
    error?: boolean;
    errorText?: string;
    placeholder: string;
    setDisabled?: (value: boolean) => void;
    setError?: (value: boolean) => void;
    setValue: (value: string) => void;
    value: string;
    password?: boolean;
    letter?: boolean;
    number?: boolean;
}

const Input: React.FC<InputProps> = ({
                                         value,
                                         setValue,
                                         placeholder,
                                         error,
                                         setError,
                                         errorText,
                                         setDisabled,
                                         password,
                                         letter,
                                         number,
                                     }) => {
    const inputRef = useRef<HTMLInputElement>(null);
    const containerRef = useRef<HTMLDivElement>(null);
    const [inputActive, setInputActive] = useState(false);
    const [showPassword, setShowPassword] = useState(false);

    useEffect(() => {
        function handleClickOutside(event: MouseEvent) {
            if (containerRef.current && !containerRef.current.contains(event.target as Node)) {
                setInputActive(false);
            }
        }

        document.addEventListener('mousedown', handleClickOutside);
        return () => {
            document.removeEventListener('mousedown', handleClickOutside);
        };
    }, []);

    return (
        <>
            <div
                ref={containerRef}
                className={`myInput ${inputActive ? 'active' : error ? 'error' : ''} `}
                onClick={() => {
                    if (setError) {
                        setError(false);
                    }
                    setInputActive(true);
                }}
            >
                <input
                    placeholder={placeholder}
                    value={value}
                    onChange={(e) => {
                        if (setDisabled) {
                            setDisabled(true);
                        }
                        if (letter) {
                            const lettersOnly = e.target.value.replace(/[^A-Za-zА-Я]/g, '');
                            setValue(lettersOnly);
                        } else {
                            setValue(e.target.value);
                        }
                    }}
                    type={password && !showPassword ? 'password' : number ? "number" : 'text'}
                    ref={inputRef}
                />
                {password && (
                    <div
                        onClick={() => setShowPassword((prev) => !prev)}
                        style={{cursor: 'pointer', display: 'flex', justifyContent: 'center', alignItems: 'center'}}
                    >
                        {showPassword ? (
                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 16 16"
                                 fill="none">
                                <path
                                    d="M15.4698 7.83C14.8817 6.30882 13.8608 4.99331 12.5332 4.04604C11.2056 3.09878 9.62953 2.56129 7.99979 2.5C6.37005 2.56129 4.79398 3.09878 3.46639 4.04604C2.1388 4.99331 1.11787 6.30882 0.529787 7.83C0.490071 7.93985 0.490071 8.06015 0.529787 8.17C1.11787 9.69118 2.1388 11.0067 3.46639 11.954C4.79398 12.9012 6.37005 13.4387 7.99979 13.5C9.62953 13.4387 11.2056 12.9012 12.5332 11.954C13.8608 11.0067 14.8817 9.69118 15.4698 8.17C15.5095 8.06015 15.5095 7.93985 15.4698 7.83ZM7.99979 12.5C5.34979 12.5 2.54979 10.535 1.53479 8C2.54979 5.465 5.34979 3.5 7.99979 3.5C10.6498 3.5 13.4498 5.465 14.4648 8C13.4498 10.535 10.6498 12.5 7.99979 12.5Z"
                                    fill="#161616"/>
                                <path
                                    d="M7.99979 5C7.40644 5 6.82642 5.17595 6.33308 5.50559C5.83973 5.83524 5.45521 6.30377 5.22815 6.85195C5.00109 7.40013 4.94168 8.00333 5.05743 8.58527C5.17319 9.16721 5.45891 9.70176 5.87847 10.1213C6.29802 10.5409 6.83257 10.8266 7.41452 10.9424C7.99646 11.0581 8.59966 10.9987 9.14784 10.7716C9.69602 10.5446 10.1646 10.1601 10.4942 9.66671C10.8238 9.17336 10.9998 8.59334 10.9998 8C10.9998 7.20435 10.6837 6.44129 10.1211 5.87868C9.5585 5.31607 8.79544 5 7.99979 5ZM7.99979 10C7.60422 10 7.21755 9.8827 6.88865 9.66294C6.55975 9.44318 6.3034 9.13082 6.15203 8.76537C6.00065 8.39991 5.96105 7.99778 6.03822 7.60982C6.11539 7.22186 6.30587 6.86549 6.58557 6.58579C6.86528 6.30608 7.22164 6.1156 7.60961 6.03843C7.99757 5.96126 8.3997 6.00087 8.76515 6.15224C9.13061 6.30362 9.44296 6.55996 9.66273 6.88886C9.88249 7.21776 9.99979 7.60444 9.99979 8C9.99979 8.53043 9.78907 9.03914 9.414 9.41421C9.03893 9.78929 8.53022 10 7.99979 10Z"
                                    fill="#161616"/>
                            </svg>) : (
                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 16 16"
                                 fill="none">
                                <path
                                    d="M2.61979 11.255L3.33479 10.545C2.5519 9.84206 1.93677 8.97234 1.53479 8C2.54979 5.465 5.34979 3.5 7.99979 3.5C8.68173 3.509 9.3575 3.63064 9.99979 3.86L10.7748 3.08C9.89611 2.70866 8.95363 2.51167 7.99979 2.5C6.37005 2.56129 4.79398 3.09878 3.46639 4.04604C2.1388 4.99331 1.11787 6.30882 0.529787 7.83C0.490071 7.93985 0.490071 8.06015 0.529787 8.17C0.973911 9.34851 1.69 10.4055 2.61979 11.255Z"
                                    fill="#161616"/>
                                <path
                                    d="M5.99979 7.865C6.03456 7.38586 6.24063 6.93524 6.58033 6.59554C6.92003 6.25584 7.37064 6.04977 7.84979 6.015L8.75479 5.105C8.24767 4.97147 7.71441 4.97321 7.20817 5.11003C6.70193 5.24685 6.24039 5.51399 5.86958 5.8848C5.49877 6.25561 5.23164 6.71714 5.09482 7.22338C4.95799 7.72962 4.95626 8.26288 5.08979 8.77L5.99979 7.865Z"
                                    fill="#161616"/>
                                <path
                                    d="M15.4698 7.83C14.8965 6.3366 13.8988 5.04351 12.5998 4.11L14.9998 1.705L14.2948 1L0.999787 14.295L1.70479 15L4.25479 12.45C5.39173 13.117 6.68181 13.4787 7.99979 13.5C9.62953 13.4387 11.2056 12.9012 12.5332 11.954C13.8608 11.0067 14.8817 9.69118 15.4698 8.17C15.5095 8.06015 15.5095 7.93985 15.4698 7.83ZM9.99979 8C9.99768 8.35005 9.90374 8.69342 9.72734 8.99578C9.55094 9.29815 9.29828 9.54892 8.99459 9.72303C8.69091 9.89714 8.34684 9.9885 7.99678 9.98797C7.64673 9.98744 7.30294 9.89503 6.99979 9.72L9.71979 7C9.89954 7.30287 9.99613 7.64783 9.99979 8ZM7.99979 12.5C6.95082 12.4817 5.92173 12.2107 4.99979 11.71L6.26979 10.44C6.84746 10.8408 7.54756 11.026 8.24785 10.9632C8.94815 10.9005 9.60415 10.5937 10.1013 10.0965C10.5985 9.59937 10.9052 8.94336 10.968 8.24307C11.0308 7.54277 10.8456 6.84267 10.4448 6.265L11.8798 4.83C13.0271 5.61749 13.9243 6.71771 14.4648 8C13.4498 10.535 10.6498 12.5 7.99979 12.5Z"
                                    fill="#161616"/>
                            </svg>
                        )}
                    </div>
                )}
            </div>
            {error && (
                <div className="myInput__errorText">
                    <svg
                        xmlns="http://www.w3.org/2000/svg"
                        width="16"
                        height="16"
                        viewBox="0 0 16 16"
                        fill="none"
                    >
                        <path
                            d="M8.58963 1.68802C8.35896 1.25202 7.64163 1.25202 7.41096 1.68802L1.41096 13.0214C1.35695 13.1229 1.33018 13.2368 1.33324 13.3518C1.33631 13.4668 1.36912 13.579 1.42847 13.6776C1.48782 13.7761 1.57168 13.8576 1.6719 13.9142C1.77211 13.9707 1.88525 14.0002 2.0003 14H14.0003C14.1153 14.0003 14.2283 13.9707 14.3285 13.9142C14.4286 13.8578 14.5124 13.7763 14.5717 13.6778C14.631 13.5793 14.6638 13.4671 14.6668 13.3522C14.6698 13.2373 14.643 13.1235 14.589 13.022L8.58963 1.68802ZM8.66696 12H7.33363V10.6667H8.66696V12ZM7.33363 9.33336V6.00002H8.66696L8.66763 9.33336H7.33363Z"
                            fill="#FC4242"
                        />
                    </svg>
                    {errorText}
                </div>
            )}
        </>
    );
};

export default Input;